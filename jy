package com.github.tvbox.osc.api;

import android.app.Activity;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.os.Handler;
import android.os.Looper;
import android.os.Message;
import android.os.StrictMode;
import android.util.Log;
import android.view.View;



import java.io.BufferedReader;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLEncoder;
import java.util.ArrayList;
import java.util.Map;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.regex.Matcher;
import java.util.regex.Pattern;


/**
 * @author Administrator
 */


public class jyUtility {
    Handler handler;
    private Handler handler2;
    private  static   int th;


    public jyUtility() {
        StrictMode.setThreadPolicy(new StrictMode.ThreadPolicy.Builder().detectDiskReads().detectDiskWrites().detectNetwork().penaltyLog().build());
        handler2 = new Handler(Looper.getMainLooper());

    }

    public jyUtility(Handler handle) {

        this.handler = handle;

    }
    public static String[]   stringSplit(String  str,String  regex){
        String[] s =null;
        if( str.indexOf(regex)>0){
           return  str.split(regex);
       }else
        s[0]=str;
        return  s;


    }






    public static Bitmap GetWebBitmap(String path) {
        try {
            byte[] data = getImage(path);
            Bitmap bm = BitmapFactory.decodeByteArray(data, 0, data.length);
            return bm;
        } catch (Exception e) {

        }

        return null;
    }

    ;


    private static byte[] getImage(String urlpath) throws Exception {
        URL url = new URL(urlpath);
        //实例化一个HTTP连接对象conn
        HttpURLConnection conn = (HttpURLConnection) url.openConnection();
        //定义请求方式为GET，其中GET的格式需要注意
        conn.setRequestMethod("GET");
        //定义请求时间，在ANDROID中最好是不好超过10秒。否则将被系统回收。
        conn.setConnectTimeout(6 * 1000);
        if (conn.getResponseCode() == 200) {
            InputStream inStream = conn.getInputStream();
            return readStream(inStream);
            //实例化一个文件对象
        }
        return null;
    }


    /**
     * 读取数据
     *
     * @param inStream 输入流
     * @return
     * @throws Exception
     */
    public static byte[] readStream(InputStream inStream) throws Exception {
        ByteArrayOutputStream outStream = new ByteArrayOutputStream();
        byte[] buffer = new byte[1024];
        int len = -1;
        //将输入流不断的读，并放到缓冲区中去。直到读完
        while ((len = inStream.read(buffer)) != -1) {
            //将缓冲区的数据不断的写到内存中去。
            outStream.write(buffer, 0, len);
        }
        outStream.close();
        inStream.close();
        return outStream.toByteArray();
    }

    public void GetWebBitmap
            (final String url, final bitmapFunction callBack) {
        handler2.post(new Runnable() {
            @Override
            public void run() {

                try {
                    Bitmap bt = GetWebBitmap(url);

                    if (callBack != null) {
                        callBack.onResponse(bt);

                    }

                } catch (Exception e) {
                    e.printStackTrace();
                }


            }
        });

    }

    ;

    public void GetWebByte
            (final String url, final String encoding, final byteFunction callBack) {
        handler2.post(new Runnable() {
            @Override
            public void run() {

                try {
                    byte[] bt = getImage(url);
                    if (callBack != null) {
                        callBack.onResponse(bt);

                    }

                } catch (Exception e) {
                    e.printStackTrace();
                }


            }
        });

    }
  private   static   int  idd;
    public  static   <T extends View> T getView(Activity a, int id) {

        return (T) a.findViewById(id);
    }
  private  static ExecutorService executorService = Executors.newFixedThreadPool(5);
//开启5个线异步下载

    public void GetWebSource
            (final String data, final String encoding, final stringFunction callBack) {


        executorService.submit(new Runnable() {

            String result = "";

            @Override
            public void run() {

                InputStream inputStream = null;
                InputStreamReader inputStreamReader = null;
                BufferedReader bufferedReader = null;
                try {

                    URL url = new URL(data);
                    HttpURLConnection httpURLConnection = (HttpURLConnection) url.openConnection();
                    httpURLConnection.setRequestMethod("GET");
                    httpURLConnection.setRequestProperty("User-Agent", "Mozilla/5.0 (Windows NT 10.0; WOW64; Trident/7.0; rv:11.0) like Gecko");
                    httpURLConnection.setConnectTimeout(30000);
                    httpURLConnection.setReadTimeout(30000);


                    httpURLConnection.connect();
                    if (httpURLConnection.getResponseCode() == 200) {
                        inputStream = httpURLConnection.getInputStream();
                        inputStreamReader = new InputStreamReader(inputStream, encoding);
                        bufferedReader = new BufferedReader(inputStreamReader);
                        String readerLine = "";
                        while ((readerLine = bufferedReader.readLine()) != null) {
                            result += readerLine;
                            // Log.i("readerLine", readerLine);
                        }

                    }

                    if (httpURLConnection != null) httpURLConnection.disconnect();
                    if (inputStream != null) {
                        inputStream.close();
                        inputStreamReader.close();
                        bufferedReader.close();
                    }

                } catch (MalformedURLException e) {
                    e.printStackTrace();
                } catch (IOException e) {
                    e.printStackTrace();
                }
                if (result == null) {
                   th++;
                   if(th<4)
                   {  GetWebSource(data,encoding,callBack);}
                    return;

                }th=0;

                handler2.post(new Runnable() {
                    @Override
                    public void run() {

                        if (callBack != null) {
                            String st="";

                             st=result;
                            result = "";
                            callBack.onResponse(st);


                        }
                    }
                });

            }
        });


    }
    public  static   String getMeddileString(String s, String start, String end) {
        return s.substring((s.indexOf(start) + start.length()),
                s.indexOf(end));
    }//




    public interface stringFunction {
        void onResponse (String result);
    }

    interface byteFunction {
        void onResponse (byte[] result);
    }

    interface bitmapFunction {
        void onResponse (Bitmap result);
    }



    /**
     * @author 删除回车换行制表双引号
     */

    public static String deleteStrVoid(String str) {
        String dest = "";
        if (str != null) {
            Pattern p = Pattern.compile("\\s*|\t|\r|\n");
            Matcher m = p.matcher(str);
            dest = m.replaceAll("");
            dest = dest.replace("\"", "");

        }
        return dest;
    }
    /**
     * @author 删除回车换行制表
     */
    public static String deleteStrVoid2(String str) {
        String dest = "";
        if (str != null) {
            Pattern p = Pattern.compile("\\s*|\t|\r|\n");
            Matcher m = p.matcher(str);
            dest = m.replaceAll("");
           // dest = dest.replace("\"", "");

        }
        return dest;
    }


    /**
     * 读取输入流，得到html的二进制数据
     *
     * @param inStream
     * @return
     * @throws Exception
     */
    public static byte[] readInputStream(InputStream inStream) throws Exception {
        ByteArrayOutputStream outStream = new ByteArrayOutputStream();
        byte[] buffer = new byte[1024];
        int len = 0;
        while ((len = inStream.read(buffer)) != -1) {
            outStream.write(buffer, 0, len);
        }
        inStream.close();
        return outStream.toByteArray();
    }


    protected static final int SHOW_RESPONSE = 0;


    public static String getHtml1417(String path) {
        // 通过网络地址创建URL对象

        try {
        URL url = new URL(path);
        // 根据URL
        // 打开连接，URL.openConnection函数会根据URL的类型，返回不同的URLConnection子类的对象，这里URL是一个http，因此实际返回的是HttpURLConnection
        HttpURLConnection conn = (HttpURLConnection) url.openConnection();
        // 设定URL的请求类别，有POST、GET 两类
        conn.setRequestMethod("GET");
        //conn.setRequestProperty("User-Agent", "GHmvA6bdcIjGO8IKYQEXXLyeYoKhuS");
       conn.setRequestProperty("Referer", "zFb5XTg1pslilVykLBCg0FMocGaXqa");
        //设置从主机读取数据超时（单位：毫秒）
       // conn.setRequestProperty("Connection", "Keep-Alive");
        conn.setRequestProperty("Host", "14.17.115.200:520");
           // conn.setRequestProperty("Accept-Encoding", "gzip");

        conn.setConnectTimeout(50000);
        //设置连接主机超时（单位：毫秒）
        conn.setReadTimeout(50000);

        //conn.connect();

        // 通过打开的连接读取的输入流,获取html数据
        int response = 0; // 获得服务器的响应码

            response = conn.getResponseCode();
            if (response == HttpURLConnection.HTTP_OK) {

                InputStream inStream = conn.getInputStream();
                // 得到html的二进制数据
                byte[] data = readInputStream(inStream);
                // 是用指定的字符集解码指定的字节数组构造一个新的字符串
                String html = new String(data, "utf-8");
                return html;
            }



        } catch (IOException e) {
            e.printStackTrace();
        } catch (Exception e) {
            e.printStackTrace();
        }

        return "null";

    }



    /*
     * Function : 发送Post请求到服务器 //参数 Map<String,String> params = new
     * HashMap<String,String>(); params.put("RECSMSMSG", strRecSmsMsg);
     * //params.put("name", "李四"); Param : params请求体内容，encode编码格式
     */
    public static String httpPostDatajy(String strUrlPath,
                                        String params) {

        byte[] data = params.getBytes();// 获得请求体
        try {

            // String urlPath = "http://192.168.1.9:80/JJKSms/RecSms.php";
            URL url = new URL(strUrlPath);

            HttpURLConnection httpURLConnection = (HttpURLConnection) url
                    .openConnection();
            httpURLConnection.setConnectTimeout(3000); // 设置连接超时时间
            httpURLConnection.setDoInput(true); // 打开输入流，以便从服务器获取数据
            httpURLConnection.setDoOutput(true); // 打开输出流，以便向服务器提交数据
            httpURLConnection.setRequestMethod("POST"); // 设置以Post方式提交数据
            httpURLConnection.setUseCaches(false); // 使用Post方式不能使用缓存
            // 设置请求体的类型是文本类型
            httpURLConnection.setRequestProperty("Accept",
                    "application/json, text/javascript, */*; q=0.01");

            //httpURLConnection.setRequestProperty("Accept-Encoding",
            //	"gzip, deflate");
            //httpURLConnection.setRequestProperty("Accept-Language",
            //	"zh-CN,zh;q=0.8");

            httpURLConnection.setRequestProperty("Cache-Control",
                    "max-age=0");

            httpURLConnection.setRequestProperty("Connection",
                    "keep-alive");


            httpURLConnection.setRequestProperty("Content-Type",
                    "application/x-www-form-urlencoded");
            // 设置请求体的长度
            httpURLConnection.setRequestProperty("Content-Length",
                    String.valueOf(data.length));
            httpURLConnection.setRequestProperty("Origin",
                    "http://000o.cc");
            httpURLConnection.setRequestProperty("Referer",
                    "http://000o.cc/jx/ty.php");
            httpURLConnection.setRequestProperty("User-Agent",
                    "Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/54.0.2840.59 Safari/537.36 115Browser/8.3.0");
            httpURLConnection.setRequestProperty("X-Requested-With",
                    "XMLHttpRequest");

            // 获得输出流，向服务器写入数据
            OutputStream outputStream = httpURLConnection.getOutputStream();
            outputStream.write(data);

            int response = httpURLConnection.getResponseCode(); // 获得服务器的响应码
            if (response == HttpURLConnection.HTTP_OK) {
                InputStream inptStream = httpURLConnection.getInputStream();
                String result = dealResponseResult(inptStream); // 处理服务器的响应结果
                //URLDecoder dedURL = new URLDecoder();
                //result = URLDecoder.decode(result, "utf-8");

                return result;
            }
        } catch (IOException e) {
            // e.printStackTrace();
            return "err: " + e.getMessage().toString();
        }
        return "-1";
    }

    /*
     * Function : 发送Post请求到服务器 //参数 Map<String,String> params = new
     * HashMap<String,String>(); params.put("RECSMSMSG", strRecSmsMsg);
     * //params.put("name", "李四"); Param : params请求体内容，encode编码格式
     */
    public static String httpPostData(String strUrlPath,String encode,
                                      String params) {

        byte[] data = params.getBytes();// 获得请求体
        try {

            // String urlPath = "http://192.168.1.9:80/JJKSms/RecSms.php";
            URL url = new URL(strUrlPath);

            HttpURLConnection httpURLConnection = (HttpURLConnection) url
                    .openConnection();
            httpURLConnection.setConnectTimeout(3000); // 设置连接超时时间
            httpURLConnection.setDoInput(true); // 打开输入流，以便从服务器获取数据
            httpURLConnection.setDoOutput(true); // 打开输出流，以便向服务器提交数据
            httpURLConnection.setRequestMethod("POST"); // 设置以Post方式提交数据
            httpURLConnection.setUseCaches(false); // 使用Post方式不能使用缓存
            // 设置请求体的类型是文本类型
            //User-Agent: Mozilla/4.0 (compatible; MSIE 9.0; Windows NT 6.1)

            httpURLConnection.setRequestProperty(" User-Agent",
                    "Mozilla/4.0 (compatible; MSIE 9.0; Windows NT 6.1)");
            // 设置请求体的长度
            httpURLConnection.setRequestProperty("Content-Length",
                    String.valueOf(data.length));
            httpURLConnection.setRequestProperty("Content-Type",
                    "application/x-www-form-urlencoded");
           // Cache-Control: no-cache
            httpURLConnection.setRequestProperty("Accept-Language", "zh-cn");

            httpURLConnection.setRequestProperty("Accept",
                    "*/*");
            // Content-Type: application/x-www-form-urlencoded
            httpURLConnection.setRequestProperty("Host",
                   "www.91zy.cc");
            //Referer: http://www.91zy.cc/search.asp
            httpURLConnection.setRequestProperty("Referer",
                    "http://www.91zy.cc/search.asp");
            // 获得输出流，向服务器写入数据
            OutputStream outputStream = httpURLConnection.getOutputStream();
            outputStream.write(data);

            int response = httpURLConnection.getResponseCode(); // 获得服务器的响应码
            if (response == HttpURLConnection.HTTP_OK) {
                InputStream inptStream = httpURLConnection.getInputStream();
                byte[]datee = readInputStream(inptStream);
                // 是用指定的字符集解码指定的字节数组构造一个新的字符串
                String html = new String(datee, encode);

                httpURLConnection = null;
                url = null;
                httpURLConnection = null;
                inptStream.close();
                outputStream.close();
                return html; // 处理服务器的响应结果
            }
        } catch (IOException e) {
            // e.printStackTrace();
            return "err: " + e.getMessage().toString();
        } catch (Exception e) {
            e.printStackTrace();
        }
        return "-1";
    }

    /*
     * Function : 发送Post请求到服务器 //参数 Map<String,String> params = new


    /*
     * Function : 封装请求体信息 Param : params请求体内容，encode编码格式
     */
    public static StringBuffer getRequestData(Map<String, String> params,
                                              String encode) {
        StringBuffer stringBuffer = new StringBuffer(); // 存储封装好的请求体信息
        try {
            for (Map.Entry<String, String> entry : params.entrySet()) {
                stringBuffer.append(entry.getKey()).append("=")
                        .append(URLEncoder.encode(entry.getValue(), encode))
                        .append("&");
            }
            stringBuffer.deleteCharAt(stringBuffer.length() - 1); // 删除最后的一个"&"
        } catch (Exception e) {
            e.printStackTrace();
        }
        return stringBuffer;
    }

    /*
     * Function : 处理服务器的响应结果（将输入流转化成字符串） Param : inputStream服务器的响应输入流
     */
    private static String dealResponseResult(InputStream inputStream) {
        String resultData = null; // 存储处理结果
        ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
        byte[] data = new byte[1024];
        int len = 0;
        try {
            while ((len = inputStream.read(data)) != -1) {
                byteArrayOutputStream.write(data, 0, len);
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
        resultData = new String(byteArrayOutputStream.toByteArray());
        try {
            inputStream.close();
            byteArrayOutputStream.close();
        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
        return resultData;
    }


    private class sendValueToServer implements Runnable {
        String svrInfo;
        String encoding;

        public sendValueToServer(Object url_path, Object Encoding) {
            this.svrInfo = (String) url_path;
            this.encoding = (String) Encoding;

        }

        @Override
        public void run() {
            String    result = "";
            InputStream inputStream = null;
            InputStreamReader inputStreamReader = null;
            BufferedReader bufferedReader = null;
            try {

                URL url = new URL(svrInfo);
                HttpURLConnection httpURLConnection = (HttpURLConnection) url.openConnection();
                httpURLConnection.setRequestMethod("GET");
                httpURLConnection.setRequestProperty("User-Agent", "Mozilla/5.0 (Windows NT 10.0; WOW64; Trident/7.0; rv:11.0) like Gecko");
                httpURLConnection.setConnectTimeout(30000);
                httpURLConnection.setReadTimeout(30000);
                httpURLConnection.connect();
                if (httpURLConnection.getResponseCode() == 200) {
                    inputStream = httpURLConnection.getInputStream();
                    inputStreamReader = new InputStreamReader(inputStream, encoding);
                    bufferedReader = new BufferedReader(inputStreamReader);
                    String readerLine = "";
                    while ((readerLine = bufferedReader.readLine()) != null) {
                        result += readerLine;
                        // Log.i("readerLine", readerLine);
                    }

                }


                if (httpURLConnection != null) httpURLConnection.disconnect();
                if (inputStream != null) {
                    inputStream.close();

                }

            } catch (MalformedURLException e) {
                e.printStackTrace();
            } catch (IOException e) {
                e.printStackTrace();
            }
            if (result == null) {
                return;

            }
            Message message = Message.obtain();
            message.obj = result;
            message.what = 1;
            handler.sendMessage(message);
            result = "";
            // onSuccessByteMethod(result.getBytes(),callbkk);
        }
    }


    /**
     * 访问网页
     */
    private void getWebData(String Url_path, String encodingg) {

        new Thread(new sendValueToServer(Url_path, encodingg)).start();

    }

    /**
     * 访问网页
     */
    public void getWebData(Handler hd, String Url_path, String encodingg) {

        this.handler = hd;

        new Thread(new sendValueToServer(Url_path, encodingg)).start();

    }


    // 正则匹配alt+shift+j快速注释

    /**
     * @param
     * @param
     * @return匹配的文本
     */
    public static String[] PatternMatche(String paramString1,
                                         String paramString2) {

        Matcher localMatcher = Pattern.compile(paramString2, (int) 40).matcher(
                paramString1);
        ArrayList localArrayList = new ArrayList();
        while (localMatcher.find())
            localArrayList.add(localMatcher.group());
        return (String[]) localArrayList.toArray(new String[localArrayList
                .size()]);
    }

    // 正则取文本中间

    /**
     * @param
     * @param
     * @param
     * @param
     * @return 正则取文本中间返回文本数组
     */
    public static String[] getMeddiltextPatternMatche(String text, String one,
                                                      String two, boolean bl) {

        // 按指定模式在字符串查找

        text = text.replaceAll(" ", "");
        text = text.replaceAll("\"", "");


        String[] str = PatternMatche(text, one + "(.*?)" + two);

        if (str.length < 0) {

            return null;

        }

        if (bl == true) {

            return str;

        } else {

            String st;
            ArrayList localArrayLists = new ArrayList();
            for (int i = 0; i < str.length; i++) {

                st = getMeddileStringLast(str[i], one, two);

                localArrayLists.add(st);

            }

            return (String[]) localArrayLists
                    .toArray(new String[localArrayLists.size()]);

        }

    }
    public static String replaceBlank(String str) {
        String dest = "";
        if (str!=null) {
           str = str.replaceAll("\"", "");
            Pattern p = Pattern.compile("\\s*|\t|\r|\n");
            Matcher m = p.matcher(str);
            dest = m.replaceAll("");
        }
        return dest;
    }
    /**
     * @param s
     * @param start
     * @param end
     * @return返回中间文本自动去除空白与双引号
     */
    public static String getMeddileStringF(String s, String start, String end) {
        int istart=s.indexOf(start);
        int iend=s.indexOf(end);

        if(iend==-1|| istart==-1|| istart>iend){
    return  null;
        }

        s = s.substring((istart + start.length()), iend);

        s = s.replaceAll(" ", "");
        s = s.replaceAll("\"", "");

        return s;

    }

    /**
     * @param s
     * @param start
     * @param end
     * @return返回中间文本自动去除空白与双引号
     */
    public static String getMeddileStringLast(String s, String start, String end) {
        s = s.replaceAll(" ", "");
        s = s.replaceAll("\"", "");

        int istart=s.lastIndexOf(start);
        int iend=s.lastIndexOf(end);
        if(iend==-1|| istart==-1|| istart>iend){
            return  null;
        }
        s = s.substring((s.lastIndexOf(start) + start.length()),
                s.lastIndexOf(end));



        return s;

    }

    // 分隔文本

    /**
     * @param text 原文本ghkjl
     * @param t
     * @return 返回gh和jl
     */
    public static String[] splittext(String text, String t) {
        // 生成一个Pattern,同时编译一个正则表达式
        Pattern p = Pattern.compile("[" + t + "]+");
        // 用Pattern的split()方法把字符串按"/"分割
        String[] result = p.split(text);

        // for (int i=0; i<result.length; i++)
        // System.out.println(result[i]+"YY");

        return result;

    }

    public static void debug(String TGmname, Object mes) {

        if (mes != null) {
            if(mes.toString().length()<10000)
            {Log.d(TGmname, mes + "");
            }else
            { String ss=mes.toString();
                Log.d(TGmname, ss.substring(0));
                Log.d(TGmname, ss.substring(10000));
                if(ss.length()>20000){
                    Log.d(TGmname, ss.substring(0));
                    Log.d(TGmname, ss.substring(10000,20000));
                    Log.d(TGmname, ss.substring(20000));
                }
            }
        } else {
            Log.d(TGmname, "mes=null");
        }

    }

  /**
     * @param dataString 原文本
     * @param onetxt 其中的一个文本
   
     * @return返回左文本
     */

public static String  getStringL(String dataString,String onetxt)

	{ String str=dataString;
			  Pattern p= Pattern.compile(onetxt+"(.*)");//取一个文本左边从最左开始取比如“发123吗354”就从123的3开始
			  
			  Matcher m = p.matcher(str);
			  m.find(); 
    return   str.replace(m.group(),"");

	}
   /**
     * @param dataString 原文本
     * @param onetxt 其中的一个文本
   
     * @return返回右文本
     */


public static String  getStringR(String dataString,String onetxt)

	{ String str=dataString;
			  Pattern p= Pattern.compile(onetxt+"(.*)");//取一个文本右边从最左开始取比如“发123吗354”就从123的3开始
			  
			  Matcher m = p.matcher(str);
			  m.find(); 
    return   m.group(1);

	}  /**
     * @param dataString
     * @param start
     * @param end
     * @param  two 为真包含 start和end
     * @return返回中间文本
     */
	public static String  getStringM(String dataString,String start,String end,boolean two )

	{ String str=dataString;
			  Pattern p= Pattern.compile(start+"(.*?)"+end);//取两天文本中间，TWO为真包含onetxt and  twotxt
			  
			  Matcher m = p.matcher(str);
			  m.find(); 
if(two){
return m.group(0);
}

return   m.group(1);

	}
  /**
     * @param dataString 原文本
     * @param dPattern 正侧表达式如“(.*?)”
     * @param ReplaceString  替换成什么
     
     * @return返回替换文本后的文本
     */
	public static String   PatternReplace(String dataString,String dPattern,String ReplaceString )

	{ String str=dataString;
			  Pattern p= Pattern.compile(dPattern);
			  
			  Matcher m = p.matcher(str);
			  m.find(); 


return      str.replace(m.group(),ReplaceString);

	}




	public static boolean isweb(String path) throws Exception {
        URL url = new URL(path);
        HttpURLConnection conn = (HttpURLConnection) url.openConnection();
        conn.setConnectTimeout(5000);
        conn.setRequestMethod("GET");
        if (conn.getResponseCode() == 200) {

            return true;
        }
        return false;
    }


}
